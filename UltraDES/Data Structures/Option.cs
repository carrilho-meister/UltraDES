////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	data structures\option.cs
//
// summary:	Implements the option class
////////////////////////////////////////////////////////////////////////////////////////////////////

using System;

namespace UltraDES
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Interface for option. </summary>
    ///
    /// <remarks>   Lucas Alves, 18/01/2016. </remarks>
    ///
    /// <typeparam name="T">    Generic type parameter. </typeparam>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public interface Option<T>
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets a value indicating whether this object is some. </summary>
        ///
        /// <value> true if this object is some, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool IsSome { get; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets a value indicating whether this object is none. </summary>
        ///
        /// <value> true if this object is none, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        bool IsNone { get; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets the value. </summary>
        ///
        /// <value> The value. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        T Value { get; }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   (Serializable)a some. </summary>
    ///
    /// <remarks>   Lucas Alves, 18/01/2016. </remarks>
    ///
    /// <typeparam name="T">    Generic type parameter. </typeparam>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    [Serializable]
    public class Some<T> : Option<T>
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Constructor. </summary>
        ///
        /// <remarks>   Lucas Alves, 18/01/2016. </remarks>
        ///
        /// <param name="value">    The value. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        private Some(T value)
        {
            Value = value;
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets a value indicating whether this object is none. </summary>
        ///
        /// <value> true if this object is none, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        public bool IsNone
        {
            get { return false; }
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets a value indicating whether this object is some. </summary>
        ///
        /// <value> true if this object is some, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        public bool IsSome
        {
            get { return true; }
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets the value. </summary>
        ///
        /// <value> The value. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        public T Value { get; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Creates a new Option&lt;T&gt; </summary>
        ///
        /// <remarks>   Lucas Alves, 18/01/2016. </remarks>
        ///
        /// <param name="value">    The value. </param>
        ///
        /// <returns>   An Option&lt;T&gt; </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        public static Option<T> Create(T value)
        {
            return new Some<T>(value);
        }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   (Serializable)a none. </summary>
    ///
    /// <remarks>   Lucas Alves, 18/01/2016. </remarks>
    ///
    /// <typeparam name="T">    Generic type parameter. </typeparam>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    [Serializable]
    public class None<T> : Option<T>
    {
        /// <summary>   The singleton. </summary>
        private static readonly None<T> Singleton = new None<T>();

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        ///     Constructor that prevents a default instance of this class from being created.
        /// </summary>
        ///
        /// <remarks>   Lucas Alves, 18/01/2016. </remarks>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        private None()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets a value indicating whether this object is none. </summary>
        ///
        /// <value> true if this object is none, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        public bool IsNone
        {
            get { return true; }
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets a value indicating whether this object is some. </summary>
        ///
        /// <value> true if this object is some, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        public bool IsSome
        {
            get { return false; }
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets the value. </summary>
        ///
        /// <value> The value. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        public T Value
        {
            get { return default(T); }
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Creates a new Option&lt;T&gt; </summary>
        ///
        /// <remarks>   Lucas Alves, 18/01/2016. </remarks>
        ///
        /// <returns>   An Option&lt;T&gt; </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        public static Option<T> Create()
        {
            return Singleton;
        }
    }
}